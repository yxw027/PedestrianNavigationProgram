function [x,P]=state_adjust(prn,prn_o,x_p,P_p,X1,X2,X3)
%-------------------------------------------------------------------------------
% Function : 一段予測の次元調整 --- 増えた衛星の初期値は逆算で算出したもの
% 
% [argin]
% prn   : 衛星PRN番号(今エポック)
% prn_o : 衛星PRN番号(前エポック)
% x_p   : 一段予測値
% P_p   : 一段予測値の共分散
% X1    : 初期値(整数値バイアス, 電離層など)
% X2    : 初期値(整数値バイアス, 電離層など)
% X3    : 初期値(整数値バイアス, 電離層など)
% 
% [argout]
% x     : 一段予測値(次元調整後)
% P     : 一段予測値の共分散(次元調整後)
% 
% 
% 周波数に関係なく, 次元調整が必要な状態変数の個数に応じて次元調整できるように変更
% 電離層の推定をする場合, 観測行列と対応する順番でX1-X3(できる限りX1)の所に入れること
% 
% Ritsumeikan Univ. EEE Sugimoto Lab. GPS Division
% S.Fujita: Dec. 21, 2007
%-------------------------------------------------------------------------------
% GLONASS対応
% January 12, 2010, T.Yanase
%-------------------------------------------------------------------------------

%--------------------------------------------
% 最初に状態変数, 分散に大きな配列を準備する.
% その配列を予測値で置換して次元調節された
% 状態変数, 分散を作成する.
% 注: 配列はPRNを列番号として扱う
%--------------------------------------------
nn=3;
if isempty(X1), nn=nn-1; end					% 空であれば "-1" する
if isempty(X2), nn=nn-1; end					% 空であれば "-1" する
if isempty(X3), nn=nn-1; end					% 空であれば "-1" する

dimp=length(x_p)-nn*length(prn_o);				% 次元が変化しない部分

index_o=[];
index_n=[];
for k=1:nn
	index_o=[index_o dimp+prn_o+61*(k-1)];		% インデックス(prn_o)
	index_n=[index_n dimp+prn+61*(k-1)];		% インデックス(prn)
end
x=zeros(dimp+61*nn,1);							% 状態の準備(prnを列番号として利用するため全衛星分を確保)
P=eye(dimp+61*(nn))*10;							% 分散の準備(prnを列番号として利用するため全衛星分を確保)

x(index_n)=[X1;X2;X3];
x([1:dimp,index_o])=x_p;						% 予測値で置換
x=x([1:dimp,index_n]);							% 可視衛星のみ抽出
P([1:dimp,index_o],[1:dimp,index_o])=P_p;		% 予測分散で置換
P=P([1:dimp,index_n],[1:dimp,index_n]);			% 可視衛星のみ抽出
